(()=>{"use strict";var t={208:(t,e,o)=>{o.d(e,{A:()=>l});var n=o(601),r=o.n(n),a=o(314),s=o.n(a)()(r());s.push([t.id,".hello-world-message {\n    color: blue;\n}",""]);const l=s},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var o="",n=void 0!==e[5];return e[4]&&(o+="@supports (".concat(e[4],") {")),e[2]&&(o+="@media ".concat(e[2]," {")),n&&(o+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),o+=t(e),n&&(o+="}"),e[2]&&(o+="}"),e[4]&&(o+="}"),o})).join("")},e.i=function(t,o,n,r,a){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(n)for(var l=0;l<this.length;l++){var i=this[l][0];null!=i&&(s[i]=!0)}for(var u=0;u<t.length;u++){var c=[].concat(t[u]);n&&s[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),o&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=o):c[2]=o),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),e.push(c))}},e}},601:t=>{t.exports=function(t){return t[1]}},72:t=>{var e=[];function o(t){for(var o=-1,n=0;n<e.length;n++)if(e[n].identifier===t){o=n;break}return o}function n(t,n){for(var a={},s=[],l=0;l<t.length;l++){var i=t[l],u=n.base?i[0]+n.base:i[0],c=a[u]||0,d="".concat(u," ").concat(c);a[u]=c+1;var p=o(d),m={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==p)e[p].references++,e[p].updater(m);else{var g=r(m,n);n.byIndex=l,e.splice(l,0,{identifier:d,updater:g,references:1})}s.push(d)}return s}function r(t,e){var o=e.domAPI(e);o.update(t);return function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;o.update(t=e)}else o.remove()}}t.exports=function(t,r){var a=n(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<a.length;s++){var l=o(a[s]);e[l].references--}for(var i=n(t,r),u=0;u<a.length;u++){var c=o(a[u]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}a=i}}},659:t=>{var e={};t.exports=function(t,o){var n=function(t){if(void 0===e[t]){var o=document.querySelector(t);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(t){o=null}e[t]=o}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(o)}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,o)=>{t.exports=function(t){var e=o.nc;e&&t.setAttribute("nonce",e)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(o){!function(t,e,o){var n="";o.supports&&(n+="@supports (".concat(o.supports,") {")),o.media&&(n+="@media ".concat(o.media," {"));var r=void 0!==o.layer;r&&(n+="@layer".concat(o.layer.length>0?" ".concat(o.layer):""," {")),n+=o.css,r&&(n+="}"),o.media&&(n+="}"),o.supports&&(n+="}");var a=o.sourceMap;a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,o)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function o(n){var r=e[n];if(void 0!==r)return r.exports;var a=e[n]={id:n,exports:{}};return t[n](a,a.exports,o),a.exports}o.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return o.d(e,{a:e}),e},o.d=(t,e)=>{for(var n in e)o.o(e,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o.nc=void 0;var n=o(72),r=o.n(n),a=o(825),s=o.n(a),l=o(659),i=o.n(l),u=o(56),c=o.n(u),d=o(540),p=o.n(d),m=o(113),g=o.n(m),f=o(208),v={};v.styleTagTransform=g(),v.setAttributes=c(),v.insert=i().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=p();r()(f.A,v);f.A&&f.A.locals&&f.A.locals;const h="auto_illustrator";function I(t,e){if(console.log("[Auto Illustrator] Updating extension prompt",{enabled:e.enabled,metaPromptLength:e.metaPrompt.length,hasSetExtensionPrompt:"function"==typeof t.setExtensionPrompt}),"function"!=typeof t.setExtensionPrompt)return void console.error("[Auto Illustrator] setExtensionPrompt function not available in context");const o=!1;e.enabled?(console.log("[Auto Illustrator] Setting extension prompt (enabled)"),t.setExtensionPrompt(h,e.metaPrompt,1,1,o,0)):(console.log("[Auto Illustrator] Clearing extension prompt (disabled)"),t.setExtensionPrompt(h,"",1,1,o,0));const n=t.extensionPrompts?.[h];console.log("[Auto Illustrator] Extension prompt configured",{key:h,enabled:e.enabled,registered:!!n,hasValue:!!n?.value,promptDetails:n})}const _=/<img_prompt="([^"\\]*(?:\\.[^"\\]*)*)"\s*>/g;function y(t){return new RegExp(_.source,_.flags).test(t)}async function E(t,e){console.log("[Auto Illustrator] Generating image for prompt:",t);const o=performance.now();try{const n=e.SlashCommandParser?.commands?.sd;if(!n||!n.callback)return console.error("[Auto Illustrator] SD command not available"),console.log("[Auto Illustrator] Available commands:",Object.keys(e.SlashCommandParser?.commands||{})),null;console.log("[Auto Illustrator] Calling SD command...");const r=await n.callback({quiet:"true"},t),a=performance.now()-o;return console.log(`[Auto Illustrator] Generated image URL: ${r} (took ${a.toFixed(0)}ms)`),r}catch(t){const e=performance.now()-o;return console.error(`[Auto Illustrator] Error generating image (after ${e.toFixed(0)}ms):`,t),null}}async function A(t,e){const o=function(t){const e=[],o=new RegExp(_.source,_.flags);let n;for(;null!==(n=o.exec(t));)e.push({fullMatch:n[0],prompt:n[1].replace(/\\"/g,'"'),startIndex:n.index,endIndex:n.index+n[0].length});return e}(t);if(console.log("[Auto Illustrator] Found",o.length,"image prompts to process"),0===o.length)return t;console.log("[Auto Illustrator] Extracted prompts:",o.map((t=>t.prompt)));const n=o.length;toastr.info(`Generating ${n} image${n>1?"s":""}...`,"Auto Illustrator");const r=performance.now(),a=[];for(const t of o){const o=await E(t.prompt,e);a.push(o)}const s=performance.now()-r,l=a.filter((t=>t)).length;console.log(`[Auto Illustrator] Generated ${l} images successfully (total time: ${s.toFixed(0)}ms, avg: ${(s/n).toFixed(0)}ms per image)`),l===n?toastr.success(`Successfully generated ${l} image${l>1?"s":""}`,"Auto Illustrator"):l>0?toastr.warning(`Generated ${l} of ${n} images`,"Auto Illustrator"):toastr.error("Failed to generate images","Auto Illustrator");let i=t;for(let t=o.length-1;t>=0;t--){const e=o[t],n=a[t];if(n){const o=`<img src="${n}" title="${e.prompt}" alt="${e.prompt}">`;i=i.substring(0,e.endIndex)+"\n"+o+i.substring(e.endIndex),console.log("[Auto Illustrator] Added image after prompt at index",t)}else i=i.substring(0,e.startIndex)+i.substring(e.endIndex),console.log("[Auto Illustrator] Removed failed prompt at index",t)}return i}function b(t){return async e=>{console.log("[Auto Illustrator] MESSAGE_RECEIVED event, messageId:",e);const o=t.chat?.[e];o?(console.log("[Auto Illustrator] Message details:",{is_user:o.is_user,is_system:o.is_system,name:o.name,mes_length:o.mes?.length}),o.is_user?console.log("[Auto Illustrator] Skipping user message"):(console.log("[Auto Illustrator] Message text preview:",o.mes.substring(0,200)),y(o.mes)?(console.log("[Auto Illustrator] Image prompts detected, processing..."),await async function(t,e,o){if(y(t)){console.log("[Auto Illustrator] Processing message for images:",e);try{const n=await A(t,o);o.chat&&o.chat[e]&&(o.chat[e].mes=n)}catch(t){console.error("[Auto Illustrator] Error processing message:",t)}}}(o.mes,e,t),console.log("[Auto Illustrator] Emitting MESSAGE_EDITED event"),t.eventSource.emit(t.eventTypes.MESSAGE_EDITED,e)):console.log("[Auto Illustrator] No image prompts found in message"))):console.log("[Auto Illustrator] No message found at index:",e)}}const x="auto_illustrator";function w(){return{enabled:!0,wordInterval:250,metaPrompt:(t=250,`\nIMPORTANT INSTRUCTION: As you generate your response, you MUST include image generation prompts inline with your narrative.\n\nEvery ${t} words (approximately), insert an image generation prompt using this EXACT format:\n<img_prompt="detailed description of the scene, character, or setting to visualize">\n\nRules for image prompts:\n1. Use the exact format: <img_prompt="your description here">\n2. The description should be detailed and visual, describing what should be in the image\n3. Focus on visual elements: character appearance, setting, atmosphere, actions, etc.\n4. Keep descriptions concise but descriptive (1-2 sentences)\n5. Generate prompts naturally within the flow of your narrative\n6. Must add the danbooru character name if the character is from a game / anime / novel, etc.\n\nExample:\nThe sun was setting over the ancient castle <img_prompt="medieval stone castle silhouette against orange and purple sunset sky, dramatic lighting, fantasy atmosphere"> as the knight approached the gates. The heavy wooden doors creaked open...\n`.trim())};var t}function S(t,e){e.extensionSettings[x]=t,e.saveSettingsDebounced()}let T,P;function C(){const t=document.getElementById("auto_illustrator_enabled"),e=document.getElementById("auto_illustrator_word_interval"),o=document.getElementById("auto_illustrator_meta_prompt");t&&(t.checked=P.enabled),e&&(e.value=P.wordInterval.toString()),o&&(o.value=P.metaPrompt)}function M(){const t=document.getElementById("auto_illustrator_enabled"),e=document.getElementById("auto_illustrator_word_interval"),o=document.getElementById("auto_illustrator_meta_prompt");P.enabled=t?.checked??P.enabled,P.wordInterval=e?parseInt(e.value):P.wordInterval,P.metaPrompt=o?.value??P.metaPrompt,S(P,T),I(T,P),console.log("[Auto Illustrator] Settings updated:",P)}function R(){P=w(),S(P,T),C(),I(T,P),console.log("[Auto Illustrator] Settings reset to defaults")}!function(){console.log("[Auto Illustrator] Initializing extension...");try{T=SillyTavern.getContext(),console.log("[Auto Illustrator] Got SillyTavern context")}catch(t){return void console.error("[Auto Illustrator] Failed to get SillyTavern context:",t)}P=function(t){const e=w(),o=t.extensionSettings[x];return o?{...e,...o}:e}(T),console.log("[Auto Illustrator] Loaded settings:",P);const t=b(T),e=T.eventTypes?.MESSAGE_RECEIVED||"MESSAGE_RECEIVED";T.eventSource.on(e,t);const o=T.eventTypes?.CHAT_COMPLETION_PROMPT_READY||"CHAT_COMPLETION_PROMPT_READY";T.eventSource.on(o,(t=>{t?.chat&&function(t){console.log("[Auto Illustrator] Pruning generated images from chat history");for(const e of t){if("user"===e.role||"system"===e.role)continue;const t=/<img_prompt="[^"]*">\s*<img\s+src="[^"]*"[^>]*title="[^"]*"[^>]*alt="[^"]*"[^>]*>/g,o=e.content;e.content=e.content.replace(t,(t=>{const e=t.match(/<img_prompt="[^"]*">/);return e?e[0]:t})),o!==e.content&&console.log("[Auto Illustrator] Pruned generated images from assistant message")}}(t.chat)})),console.log("[Auto Illustrator] Event handlers registered:",{MESSAGE_RECEIVED:e,CHAT_COMPLETION_PROMPT_READY:o});const n=document.getElementById("extensions_settings2");if(n){const t='\n    <div class="auto-illustrator-settings">\n      <div class="inline-drawer">\n        <div class="inline-drawer-toggle inline-drawer-header">\n          <b>Auto Illustrator</b>\n          <div class="inline-drawer-icon fa-solid fa-circle-chevron-down down"></div>\n        </div>\n        <div class="inline-drawer-content">\n          <div style="display: flex; align-items: center; justify-content: space-between;">\n            <label class="checkbox_label" for="auto_illustrator_enabled">\n              <input id="auto_illustrator_enabled" type="checkbox" />\n              <span>Enable Auto Illustrator</span>\n            </label>\n            <div id="auto_illustrator_reset" class="menu_button menu_button_icon">\n              <i class="fa-solid fa-undo"></i>\n              <span>Reset to Defaults</span>\n            </div>\n          </div>\n\n          <label for="auto_illustrator_word_interval">\n            <span>Word Interval (approx. words between images)</span>\n            <input id="auto_illustrator_word_interval" class="text_pole" type="number" min="50" max="1000" step="50" />\n          </label>\n\n          <label for="auto_illustrator_meta_prompt">\n            <span>Meta Prompt Template</span>\n            <small>Instructions sent to the LLM for generating image prompts</small>\n            <textarea id="auto_illustrator_meta_prompt" class="text_pole textarea_compact" rows="10"></textarea>\n          </label>\n        </div>\n      </div>\n    </div>\n  '.trim();n.insertAdjacentHTML("beforeend",t);const e=document.getElementById("auto_illustrator_enabled"),o=document.getElementById("auto_illustrator_word_interval"),r=document.getElementById("auto_illustrator_meta_prompt"),a=document.getElementById("auto_illustrator_reset");e?.addEventListener("change",M),o?.addEventListener("change",M),r?.addEventListener("input",M),a?.addEventListener("click",R),C()}console.log("[Auto Illustrator] Extension initialized successfully");const r=T.eventTypes?.CHAT_CHANGED;T.eventSource.on(r,(()=>{console.log("[Auto Illustrator] CHAT_CHANGED - reapplying extension prompt"),I(T,P)})),I(T,P)}()})();