(()=>{"use strict";var t={208:(t,e,n)=>{n.d(e,{A:()=>i});var o=n(601),r=n.n(o),s=n(314),a=n.n(s)()(r());a.push([t.id,".hello-world-message {\n    color: blue;\n}",""]);const i=a},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",o=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),o&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),o&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,o,r,s){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(o)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(a[l]=!0)}for(var u=0;u<t.length;u++){var c=[].concat(t[u]);o&&a[c[0]]||(void 0!==s&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=s),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),e.push(c))}},e}},601:t=>{t.exports=function(t){return t[1]}},72:t=>{var e=[];function n(t){for(var n=-1,o=0;o<e.length;o++)if(e[o].identifier===t){n=o;break}return n}function o(t,o){for(var s={},a=[],i=0;i<t.length;i++){var l=t[i],u=o.base?l[0]+o.base:l[0],c=s[u]||0,m="".concat(u," ").concat(c);s[u]=c+1;var g=n(m),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==g)e[g].references++,e[g].updater(p);else{var d=r(p,o);o.byIndex=i,e.splice(i,0,{identifier:m,updater:d,references:1})}a.push(m)}return a}function r(t,e){var n=e.domAPI(e);n.update(t);return function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var s=o(t=t||[],r=r||{});return function(t){t=t||[];for(var a=0;a<s.length;a++){var i=n(s[a]);e[i].references--}for(var l=o(t,r),u=0;u<s.length;u++){var c=n(s[u]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}s=l}}},659:t=>{var e={};t.exports=function(t,n){var o=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(o,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var s=e[o]={id:o,exports:{}};return t[o](s,s.exports,n),s.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0;var o=n(72),r=n.n(o),s=n(825),a=n.n(s),i=n(659),l=n.n(i),u=n(56),c=n.n(u),m=n(540),g=n.n(m),p=n(113),d=n.n(p),h=n(208),f={};f.styleTagTransform=d(),f.setAttributes=c(),f.insert=l().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=g();r()(h.A,f);h.A&&h.A.locals&&h.A.locals;const I="auto_illustrator";function E(t,e){if(console.log("[Auto Illustrator] Updating extension prompt",{enabled:e.enabled,metaPromptLength:e.metaPrompt.length,hasSetExtensionPrompt:"function"==typeof t.setExtensionPrompt}),"function"!=typeof t.setExtensionPrompt)return void console.error("[Auto Illustrator] setExtensionPrompt function not available in context");const n=!1;e.enabled?(console.log("[Auto Illustrator] Setting extension prompt (enabled)"),t.setExtensionPrompt(I,e.metaPrompt,1,1,n,0)):(console.log("[Auto Illustrator] Clearing extension prompt (disabled)"),t.setExtensionPrompt(I,"",1,1,n,0));const o=t.extensionPrompts?.[I];console.log("[Auto Illustrator] Extension prompt configured",{key:I,enabled:e.enabled,registered:!!o,hasValue:!!o?.value,promptDetails:o})}const v=/<img_prompt="([^"\\]*(?:\\.[^"\\]*)*)"\s*>/g;function A(t){return new RegExp(v.source,v.flags).test(t)}function _(t){const e=[],n=new RegExp(v.source,v.flags);let o;for(;null!==(o=n.exec(t));)e.push({fullMatch:o[0],prompt:o[1].replace(/\\"/g,'"'),startIndex:o.index,endIndex:o.index+o[0].length});return e}async function x(t,e){console.log("[Auto Illustrator] Generating image for prompt:",t);const n=performance.now();try{const o=e.SlashCommandParser?.commands?.sd;if(!o||!o.callback)return console.error("[Auto Illustrator] SD command not available"),console.log("[Auto Illustrator] Available commands:",Object.keys(e.SlashCommandParser?.commands||{})),null;console.log("[Auto Illustrator] Calling SD command...");const r=await o.callback({quiet:"true"},t),s=performance.now()-n;return console.log(`[Auto Illustrator] Generated image URL: ${r} (took ${s.toFixed(0)}ms)`),r}catch(t){const e=performance.now()-n;return console.error(`[Auto Illustrator] Error generating image (after ${e.toFixed(0)}ms):`,t),null}}async function y(t,e,n){if(A(t)){console.log("[Auto Illustrator] Processing message for images:",e);try{const o=await async function(t,e){const n=_(t);if(console.log("[Auto Illustrator] Found",n.length,"image prompts to process"),0===n.length)return t;console.log("[Auto Illustrator] Extracted prompts:",n.map((t=>t.prompt)));const o=n.length;toastr.info(`Generating ${o} image${o>1?"s":""}...`,"Auto Illustrator");const r=performance.now(),s=[];for(const t of n){const n=await x(t.prompt,e);s.push(n)}const a=performance.now()-r,i=s.filter((t=>t)).length;console.log(`[Auto Illustrator] Generated ${i} images successfully (total time: ${a.toFixed(0)}ms, avg: ${(a/o).toFixed(0)}ms per image)`),i===o?toastr.success(`Successfully generated ${i} image${i>1?"s":""}`,"Auto Illustrator"):i>0?toastr.warning(`Generated ${i} of ${o} images`,"Auto Illustrator"):toastr.error("Failed to generate images","Auto Illustrator");let l=t;for(let t=n.length-1;t>=0;t--){const e=n[t],o=s[t];if(o){const n=`<img src="${o}" title="${e.prompt}" alt="${e.prompt}">`;l=l.substring(0,e.endIndex)+"\n"+n+l.substring(e.endIndex),console.log("[Auto Illustrator] Added image after prompt at index",t)}else console.log("[Auto Illustrator] Image generation failed for prompt at index",t,"- keeping tag")}return l}(t,n);n.chat&&n.chat[e]&&(n.chat[e].mes=o)}catch(t){console.error("[Auto Illustrator] Error processing message:",t)}}}function b(t,e){const n=`${t}:${e}`;let o=0;for(let t=0;t<n.length;t++){o=(o<<5)-o+n.charCodeAt(t),o|=0}return`prompt_${Math.abs(o).toString(36)}`}class S{constructor(){this.prompts=new Map}addPrompt(t,e,n){const o=b(t,e);if(this.prompts.has(o))return console.log("[Auto Illustrator Queue] Prompt already queued:",o),null;const r={id:o,prompt:t,startIndex:e,endIndex:n,state:"QUEUED",attempts:0,detectedAt:Date.now()};return this.prompts.set(o,r),console.log("[Auto Illustrator Queue] Added prompt:",o,t),r}hasPrompt(t,e){const n=b(t,e);return this.prompts.has(n)}hasPromptByText(t){for(const e of this.prompts.values())if(e.prompt===t)return!0;return!1}getNextPending(){for(const t of this.prompts.values())if("QUEUED"===t.state)return t;return null}updateState(t,e,n){const o=this.prompts.get(t);o?(o.state=e,"GENERATING"===e&&(o.generationStartedAt=Date.now(),o.attempts++),"COMPLETED"!==e&&"FAILED"!==e||(o.completedAt=Date.now()),n?.imageUrl&&(o.imageUrl=n.imageUrl),n?.error&&(o.error=n.error),console.log("[Auto Illustrator Queue] Updated state:",t,e)):console.warn("[Auto Illustrator Queue] Prompt not found:",t)}getPrompt(t){return this.prompts.get(t)}getAllPrompts(){return Array.from(this.prompts.values())}getPromptsByState(t){return this.getAllPrompts().filter((e=>e.state===t))}getStats(){const t={DETECTED:0,QUEUED:0,GENERATING:0,COMPLETED:0,FAILED:0};for(const e of this.prompts.values())t[e.state]++;return t}clear(){console.log("[Auto Illustrator Queue] Clearing queue"),this.prompts.clear()}size(){return this.prompts.size}adjustPositionsAfterInsertion(t,e,n=Date.now()){for(const o of this.prompts.values())o.detectedAt<n&&o.startIndex>t&&("QUEUED"===o.state||"GENERATING"===o.state)&&(o.startIndex+=e,o.endIndex+=e)}}class P{constructor(t,e,n=300,o){this.messageId=-1,this.lastSeenText="",this.pollInterval=null,this.isRunning=!1,this.queue=t,this.context=e,this.intervalMs=n,this.onNewPromptsCallback=o}start(t){this.isRunning&&(console.warn("[Auto Illustrator Monitor] Already running, stopping previous monitor"),this.stop()),this.messageId=t,this.lastSeenText="",this.isRunning=!0,console.log(`[Auto Illustrator Monitor] Starting monitor for message ${t} (interval: ${this.intervalMs}ms)`),this.pollInterval=setInterval((()=>{this.checkForNewPrompts()}),this.intervalMs),this.checkForNewPrompts()}stop(){this.isRunning&&(console.log("[Auto Illustrator Monitor] Stopping monitor"),this.isRunning=!1,this.pollInterval&&(clearInterval(this.pollInterval),this.pollInterval=null),this.messageId=-1,this.lastSeenText="")}checkForNewPrompts(){if(!this.isRunning||this.messageId<0)return;const t=this.context.chat?.[this.messageId];if(!t)return void console.warn("[Auto Illustrator Monitor] Message not found:",this.messageId);const e=t.mes||"";if(e===this.lastSeenText)return;console.log(`[Auto Illustrator Monitor] Text changed (${this.lastSeenText.length} -> ${e.length} chars)`);const n=this.extractNewPrompts(e);if(n.length>0){console.log(`[Auto Illustrator Monitor] Found ${n.length} new prompts`);for(const t of n)this.queue.addPrompt(t.prompt,t.startIndex,t.endIndex);this.onNewPromptsCallback&&this.onNewPromptsCallback()}this.lastSeenText=e}extractNewPrompts(t){const e=_(t),n=[];for(const t of e)this.queue.hasPromptByText(t.prompt)||n.push(t);return n}getStatus(){return{isRunning:this.isRunning,messageId:this.messageId,lastTextLength:this.lastSeenText.length,intervalMs:this.intervalMs}}isActive(){return this.isRunning}}class w{constructor(t,e,n=1){this.messageId=-1,this.isRunning=!1,this.isProcessing=!1,this.activeGenerations=0,this.onImageGenerated=null,this.processPromise=null,this.deferInsertions=!1,this.deferredImages=[],this.queue=t,this.context=e,this.maxConcurrent=n}start(t,e,n=!1){this.isRunning&&(console.warn("[Auto Illustrator Processor] Already running, stopping previous processor"),this.stop()),this.messageId=t,this.isRunning=!0,this.onImageGenerated=e,this.activeGenerations=0,this.deferInsertions=n,this.deferredImages=[],console.log(`[Auto Illustrator Processor] Starting processor for message ${t} (max concurrent: ${this.maxConcurrent}, defer: ${n})`),this.processNext()}stop(){this.isRunning&&(console.log("[Auto Illustrator Processor] Stopping processor"),this.isRunning=!1,this.messageId=-1,this.onImageGenerated=null)}async processNext(){if(!(!this.isRunning||this.activeGenerations>=this.maxConcurrent||this.isProcessing)){this.isProcessing=!0;try{const t=this.queue.getNextPending();if(!t)return this.isProcessing=!1,void console.log("[Auto Illustrator Processor] No pending prompts, waiting...");console.log(`[Auto Illustrator Processor] Processing prompt: ${t.id}`),this.queue.updateState(t.id,"GENERATING"),this.activeGenerations++,this.generateImageForPrompt(t).then((()=>{this.activeGenerations--,this.processNext()})).catch((t=>{console.error("[Auto Illustrator Processor] Unexpected error:",t),this.activeGenerations--,this.processNext()})),this.activeGenerations<this.maxConcurrent?(this.isProcessing=!1,setImmediate((()=>this.processNext()))):this.isProcessing=!1}catch(t){console.error("[Auto Illustrator Processor] Error in processNext:",t),this.isProcessing=!1}}}async generateImageForPrompt(t){try{console.log(`[Auto Illustrator Processor] Generating image for: ${t.prompt}`);const e=await x(t.prompt,this.context);e?(this.queue.updateState(t.id,"COMPLETED",{imageUrl:e}),console.log(`[Auto Illustrator Processor] Generated image: ${e}`),this.deferInsertions?(this.deferredImages.push({prompt:t,imageUrl:e}),console.log(`[Auto Illustrator Processor] Deferred image insertion (${this.deferredImages.length} total)`)):this.onImageGenerated&&this.isRunning&&await this.onImageGenerated(t,e,this.messageId)):(this.queue.updateState(t.id,"FAILED",{error:"Image generation returned null"}),console.warn(`[Auto Illustrator Processor] Failed to generate image for: ${t.prompt}`))}catch(e){this.queue.updateState(t.id,"FAILED",{error:e instanceof Error?e.message:String(e)}),console.error("[Auto Illustrator Processor] Error generating image:",e)}}async processRemaining(){for(console.log("[Auto Illustrator Processor] Processing remaining prompts...");this.activeGenerations>0;)console.log(`[Auto Illustrator Processor] Waiting for ${this.activeGenerations} active generations to complete...`),await new Promise((t=>setTimeout(t,100)));const t=this.queue.getPromptsByState("QUEUED");if(console.log(`[Auto Illustrator Processor] ${t.length} prompts remaining`),0!==t.length){for(const e of t)await this.generateImageForPrompt(e);console.log("[Auto Illustrator Processor] Finished processing remaining prompts")}}trigger(){this.isRunning&&!this.isProcessing&&this.processNext()}getDeferredImages(){return this.deferredImages}clearDeferredImages(){this.deferredImages=[]}getStatus(){return{isRunning:this.isRunning,messageId:this.messageId,activeGenerations:this.activeGenerations,maxConcurrent:this.maxConcurrent,queueStats:this.queue.getStats()}}}const T="auto_illustrator";function D(){return{enabled:!0,wordInterval:250,metaPrompt:(t=250,`\nIMPORTANT INSTRUCTION: As you generate your response, you MUST include image generation prompts inline with your narrative.\n\nEvery ${t} words (approximately), insert an image generation prompt using this EXACT format:\n<img_prompt="detailed description of the scene, character, or setting to visualize">\n\nRules for image prompts:\n1. Use the exact format: <img_prompt="your description here">\n2. The description should be detailed and visual, describing what should be in the image\n3. Focus on visual elements: character appearance, setting, atmosphere, actions, etc.\n4. Keep descriptions concise but descriptive (1-2 sentences)\n5. Generate prompts naturally within the flow of your narrative\n6. Must add the danbooru character name if the character is from a game / anime / novel, etc.\n7. Use "rating:nsfw" tag for nsfw scenarios\n\nExample:\nThe sun was setting over the ancient castle <img_prompt="medieval stone castle silhouette against orange and purple sunset sky, dramatic lighting, fantasy atmosphere"> as the knight approached the gates. The heavy wooden doors creaked open...\n`.trim()),streamingEnabled:!0,streamingPollInterval:300,maxConcurrentGenerations:1};var t}function R(t,e){e.extensionSettings[T]=t,e.saveSettingsDebounced()}let C,G,M=null,$=null,N=null,k=null;function L(){const t=document.getElementById("auto_illustrator_enabled"),e=document.getElementById("auto_illustrator_word_interval"),n=document.getElementById("auto_illustrator_meta_prompt"),o=document.getElementById("auto_illustrator_streaming_enabled"),r=document.getElementById("auto_illustrator_streaming_poll_interval"),s=document.getElementById("auto_illustrator_max_concurrent");t&&(t.checked=G.enabled),e&&(e.value=G.wordInterval.toString()),n&&(n.value=G.metaPrompt),o&&(o.checked=G.streamingEnabled),r&&(r.value=G.streamingPollInterval.toString()),s&&(s.value=G.maxConcurrentGenerations.toString())}function O(){const t=document.getElementById("auto_illustrator_enabled"),e=document.getElementById("auto_illustrator_word_interval"),n=document.getElementById("auto_illustrator_meta_prompt"),o=document.getElementById("auto_illustrator_streaming_enabled"),r=document.getElementById("auto_illustrator_streaming_poll_interval"),s=document.getElementById("auto_illustrator_max_concurrent");G.enabled=t?.checked??G.enabled,G.wordInterval=e?parseInt(e.value):G.wordInterval,G.metaPrompt=n?.value??G.metaPrompt,G.streamingEnabled=o?.checked??G.streamingEnabled,G.streamingPollInterval=r?parseInt(r.value):G.streamingPollInterval,G.maxConcurrentGenerations=s?parseInt(s.value):G.maxConcurrentGenerations,R(G,C),E(C,G),console.log("[Auto Illustrator] Settings updated:",G)}function U(){G=D(),R(G,C),L(),E(C,G),console.log("[Auto Illustrator] Settings reset to defaults")}function B(t){if($?.isActive())return;if(!G.streamingEnabled||!G.enabled)return;if(!C.chat||0===C.chat.length)return;const e=C.chat.length-1,n=C.chat[e];n.is_user||n.is_system||(console.log(`[Auto Illustrator] First stream token received, starting streaming for message ${e}`),$&&$.stop(),N&&N.stop(),M=new S,N=new w(M,C,G.maxConcurrentGenerations),$=new P(M,C,G.streamingPollInterval,(()=>N?.trigger())),k=e,$.start(e),N.start(e,(async(t,e,n)=>{const o=await async function(t,e,n,o,r=!0){console.log(`[Auto Illustrator] Inserting image into message ${n} at position ${t.endIndex}`);try{const s=o.chat?.[n];if(!s)return console.warn("[Auto Illustrator] Message not found for image insertion:",n),{success:!1};const a=s.mes||"",i=`<img_prompt="${t.prompt}">`,l=a.indexOf(i);if(-1===l)return console.warn("[Auto Illustrator] Could not find prompt tag in message:",i),{success:!1};const u=l+i.length;if(a.substring(u,u+200).includes(`src="${e}"`))return console.log("[Auto Illustrator] Image already inserted, skipping:",e),{success:!1};const c=`\n<img src="${e}" title="${t.prompt}" alt="${t.prompt}">`,m=a.substring(0,u)+c+a.substring(u);if(s.mes=m,console.log(`[Auto Illustrator] Inserted image into streaming message (${a.length} -> ${m.length} chars)`),r){const t=o.eventTypes?.MESSAGE_EDITED||"MESSAGE_EDITED";o.eventSource.emit(t,n)}return{success:!0,insertionPoint:u,insertedLength:c.length}}catch(t){return console.error("[Auto Illustrator] Error inserting image:",t),{success:!1}}}(t,e,n,C);return N?.trigger(),o}),!0),console.log("[Auto Illustrator] Streaming monitor and processor started"))}async function F(){if(!$||!N||!M)return;console.log("[Auto Illustrator] GENERATION_ENDED, cleaning up streaming"),$.stop(),await N.processRemaining();const t=N.getDeferredImages(),e=k,n=M.getStats();console.log("[Auto Illustrator] Final streaming stats:",n),N.stop(),M=null,$=null,N=null,k=null,t.length>0&&null!==e&&(console.log(`[Auto Illustrator] Inserting ${t.length} deferred images`),await async function(t,e,n){if(0===t.length)return 0;console.log(`[Auto Illustrator] Batch inserting ${t.length} deferred images into message ${e}`);const o=n.chat?.[e];if(!o)return console.warn("[Auto Illustrator] Message not found for batch insertion:",e),0;let r=o.mes||"";const s=r.length,a=[...t].sort(((t,e)=>e.prompt.startIndex-t.prompt.startIndex));let i=0;for(const{prompt:t,imageUrl:e}of a){const n=`<img_prompt="${t.prompt}">`,o=r.indexOf(n);if(-1===o){console.warn("[Auto Illustrator] Could not find prompt tag in message:",n);continue}const s=o+n.length;if(r.substring(s,s+200).includes(`src="${e}"`)){console.log("[Auto Illustrator] Image already inserted, skipping:",e);continue}const a=`\n<img src="${e}" title="${t.prompt}" alt="${t.prompt}">`;r=r.substring(0,s)+a+r.substring(s),i++}o.mes=r,console.log(`[Auto Illustrator] Batch insertion complete: ${i}/${t.length} images inserted (${s} -> ${r.length} chars)`);const l=n.eventTypes?.CHARACTER_MESSAGE_RENDERED||"CHARACTER_MESSAGE_RENDERED";n.eventSource.emit(l,e,"extension");const u=n.eventTypes?.MESSAGE_EDITED||"MESSAGE_EDITED";return n.eventSource.emit(u,e),i}(t,e,C));const o=n.FAILED;o>0&&toastr.warning(`${o} image${o>1?"s":""} failed to generate during streaming`,"Auto Illustrator")}!function(){console.log("[Auto Illustrator] Initializing extension...");try{C=SillyTavern.getContext(),console.log("[Auto Illustrator] Got SillyTavern context")}catch(t){return void console.error("[Auto Illustrator] Failed to get SillyTavern context:",t)}G=function(t){const e=D(),n=t.extensionSettings[T];return n?{...e,...n}:e}(C),console.log("[Auto Illustrator] Loaded settings:",G);const t=function(t,e,n){return async o=>{if(console.log("[Auto Illustrator] MESSAGE_RECEIVED event, messageId:",o),n.streamingEnabled)return void console.log("[Auto Illustrator] Skipping MESSAGE_RECEIVED - streaming mode handles image generation");if(e(o))return void console.log("[Auto Illustrator] Skipping MESSAGE_RECEIVED - message is being processed by streaming");const r=t.chat?.[o];if(!r)return void console.log("[Auto Illustrator] No message found at index:",o);if(console.log("[Auto Illustrator] Message details:",{is_user:r.is_user,is_system:r.is_system,name:r.name,mes_length:r.mes?.length}),r.is_user)return void console.log("[Auto Illustrator] Skipping user message");if(console.log("[Auto Illustrator] Message text preview:",r.mes.substring(0,200)),!A(r.mes))return void console.log("[Auto Illustrator] No image prompts found in message");console.log("[Auto Illustrator] Image prompts detected, processing..."),await y(r.mes,o,t),console.log("[Auto Illustrator] Emitting MESSAGE_EDITED event");const s=t.eventTypes?.MESSAGE_EDITED||"MESSAGE_EDITED";t.eventSource.emit(s,o)}}(C,(t=>k===t),G),e=C.eventTypes?.MESSAGE_RECEIVED||"MESSAGE_RECEIVED";C.eventSource.on(e,t);const n=C.eventTypes?.CHAT_COMPLETION_PROMPT_READY||"CHAT_COMPLETION_PROMPT_READY";C.eventSource.on(n,(t=>{t?.chat&&function(t){console.log("[Auto Illustrator] Pruning generated images from chat history");for(const e of t){if("user"===e.role||"system"===e.role)continue;const t=/<img_prompt="[^"]*">\s*<img\s+src="[^"]*"[^>]*title="[^"]*"[^>]*alt="[^"]*"[^>]*>/g,n=e.content;e.content=e.content.replace(t,(t=>{const e=t.match(/<img_prompt="[^"]*">/);return e?e[0]:t})),n!==e.content&&console.log("[Auto Illustrator] Pruned generated images from assistant message")}}(t.chat)}));const o=C.eventTypes?.STREAM_TOKEN_RECEIVED||"STREAM_TOKEN_RECEIVED",r=C.eventTypes?.GENERATION_ENDED||"GENERATION_ENDED";C.eventSource.on(o,B),C.eventSource.on(r,F),console.log("[Auto Illustrator] Event handlers registered:",{MESSAGE_RECEIVED:e,CHAT_COMPLETION_PROMPT_READY:n,STREAM_TOKEN_RECEIVED:o,GENERATION_ENDED:r});const s=document.getElementById("extensions_settings2");if(s){const t='\n    <div class="auto-illustrator-settings">\n      <div class="inline-drawer">\n        <div class="inline-drawer-toggle inline-drawer-header">\n          <b>Auto Illustrator</b>\n          <div class="inline-drawer-icon fa-solid fa-circle-chevron-down down"></div>\n        </div>\n        <div class="inline-drawer-content">\n          <div style="display: flex; align-items: center; justify-content: space-between;">\n            <label class="checkbox_label" for="auto_illustrator_enabled">\n              <input id="auto_illustrator_enabled" type="checkbox" />\n              <span>Enable Auto Illustrator</span>\n            </label>\n            <div id="auto_illustrator_reset" class="menu_button menu_button_icon">\n              <i class="fa-solid fa-undo"></i>\n              <span>Reset to Defaults</span>\n            </div>\n          </div>\n\n          <label for="auto_illustrator_word_interval">\n            <span>Word Interval (approx. words between images)</span>\n            <input id="auto_illustrator_word_interval" class="text_pole" type="number" min="50" max="1000" step="50" />\n          </label>\n\n          <label for="auto_illustrator_meta_prompt">\n            <span>Meta Prompt Template</span>\n            <small>Instructions sent to the LLM for generating image prompts</small>\n            <textarea id="auto_illustrator_meta_prompt" class="text_pole textarea_compact" rows="10"></textarea>\n          </label>\n\n          <hr>\n\n          <label class="checkbox_label" for="auto_illustrator_streaming_enabled">\n            <input id="auto_illustrator_streaming_enabled" type="checkbox" />\n            <span>Enable Streaming Image Generation</span>\n            <small>Generate images as streaming text arrives (faster perceived latency)</small>\n          </label>\n\n          <label for="auto_illustrator_streaming_poll_interval">\n            <span>Streaming Poll Interval (ms)</span>\n            <small>How often to check for new prompts during streaming (lower = faster detection, more CPU)</small>\n            <input id="auto_illustrator_streaming_poll_interval" class="text_pole" type="number" min="100" max="1000" step="50" />\n          </label>\n\n          <label for="auto_illustrator_max_concurrent">\n            <span>Max Concurrent Generations</span>\n            <small>Maximum number of images to generate simultaneously (1 recommended for rate limiting)</small>\n            <input id="auto_illustrator_max_concurrent" class="text_pole" type="number" min="1" max="5" step="1" />\n          </label>\n        </div>\n      </div>\n    </div>\n  '.trim();s.insertAdjacentHTML("beforeend",t);const e=document.getElementById("auto_illustrator_enabled"),n=document.getElementById("auto_illustrator_word_interval"),o=document.getElementById("auto_illustrator_meta_prompt"),r=document.getElementById("auto_illustrator_streaming_enabled"),a=document.getElementById("auto_illustrator_streaming_poll_interval"),i=document.getElementById("auto_illustrator_max_concurrent"),l=document.getElementById("auto_illustrator_reset");e?.addEventListener("change",O),n?.addEventListener("change",O),o?.addEventListener("input",O),r?.addEventListener("change",O),a?.addEventListener("change",O),i?.addEventListener("change",O),l?.addEventListener("click",U),L()}console.log("[Auto Illustrator] Extension initialized successfully");const a=C.eventTypes?.CHAT_CHANGED;C.eventSource.on(a,(()=>{console.log("[Auto Illustrator] CHAT_CHANGED - reapplying extension prompt"),E(C,G)})),E(C,G)}()})();